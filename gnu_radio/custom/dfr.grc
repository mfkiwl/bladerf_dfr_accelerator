options:
  parameters:
    author: Osaze Shears
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: dfr
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: DFR Spectrum Sensing
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: noise_level
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Noise Level
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '5'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [566, 38]
    rotation: 0
    state: true
- name: qpsk_constellation
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j, 0]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2, 4]'
    type: calcdist
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [303, 39]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [183, 12]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.705'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 489]
    rotation: 0
    state: true
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: noise_level
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [333, 374]
    rotation: 0
    state: true
- name: analog_random_source_x_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '5'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '1000'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [84, 243]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [573, 326]
    rotation: 0
    state: true
- name: digital_constellation_encoder_bc_1
  id: digital_constellation_encoder_bc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qpsk_constellation
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [301, 255]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    Feedback_Scale: '0.4'
    Input_Gain: '0.5'
    Mask_Max: '0.5'
    Mask_Min: '-0.5'
    Mask_Type: '''Uniform'''
    Random_Seed: '0'
    Virtual_Nodes: '50'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"DFR Block - Perform\
      \ DFR Inference\"\"\"\n\n    def __init__(self, Virtual_Nodes=50,Input_Gain=0.5,Feedback_Scale=0.4,Random_Seed=0,Mask_Min=-0.5,Mask_Max=0.5,Mask_Type=\"\
      Uniform\"):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='DFR Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.float32]\n    \
      \    )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.Virtual_Nodes\
      \ = Virtual_Nodes\n        self.seed = Random_Seed\n        self.rng = np.random.default_rng(Random_Seed)\n\
      \        self.N = Virtual_Nodes\n        self.gamma = Input_Gain\n        self.eta\
      \ = Feedback_Scale\n        self.LAST_NODE = self.N - 1\n        self.reg =\
      \ 1e-8\n        self.reservoir = np.zeros(self.N)\n        self.mask = self.rng.uniform(Mask_Min,Mask_Max,self.N)\n\
      \n        \n\n    def work(self, input_items, output_items):\n        \"\"\"\
      example: multiply with constant\"\"\"\n        # output_items[0][:] = input_items[0]\
      \ * self.multiply_const\n        # print(input_items[0])\n\n        ADC_MAX_SIGNED\
      \ = 2**11\n\n\n        i_data_norm = np.real(input_items[0])\n        q_data_norm\
      \ = np.imag(input_items[0])\n\n        x = np.sqrt(np.power(i_data_norm,2) +\
      \ np.power(q_data_norm,2))\n        # y = ss_data[:,2]\n\n        output_items[0][:]\
      \ = x\n\n        # mask generation\n        # masked_samples = np.empty((num_samples,N))\n\
      \        # for i in range(num_samples):\n        #     masked_samples[i] = mask\
      \ * x[i]\n\n        # masked_sample = \n\n        # for j in range(N):\n\n \
      \       #     g_i = mg(gamma * masked_samples[TRAIN_DATA_BEGIN + i][j] + eta\
      \ * reservoir[LAST_NODE])\n        #     reservoir[1:N] = reservoir[0:LAST_NODE]\n\
      \        #     reservoir[0] = g_i\n\n\n\n        # y_hat = reservoir_history.dot(W)\n\
      \n\n        return len(output_items[0])\n\n    def mg(self,x):\n        a =\
      \ 2\n        b = 0.8\n        c = 0.2\n        d = 2.1\n        p = 10\n\n \
      \       return (a * x) / (b + c * np.power( (d * x), p) )\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('DFR Block', 'blk', [('Virtual_Nodes', '50'), ('Input_Gain', '0.5'),
      ('Feedback_Scale', '0.4'), ('Random_Seed', '0'), ('Mask_Min', '-0.5'), ('Mask_Max',
      '0.5'), ('Mask_Type', "'Uniform'")], [('0', 'complex', 1)], [('0', 'float',
      1)], 'DFR Block - Perform DFR Inference', ['Virtual_Nodes'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [738, 467]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Spectrum Energy - Record\
      \ Spectrum Energy\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Spectrum\
      \ Energy Block',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32]\n        )\n        \n\n        \n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n\n        i_data_norm = np.real(input_items[0])\n        q_data_norm\
      \ = np.imag(input_items[0])\n        x = np.sqrt(np.power(i_data_norm,2) + np.power(q_data_norm,2))\n\
      \        output_items[0][:] = x\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Spectrum Energy Block', 'blk', [], [('0', 'complex', 1)], [('0',
      'float', 1)], 'Spectrum Energy - Record Spectrum Energy', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [727, 408]
    rotation: 0
    state: true
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Spectrum Energy - Record\
      \ Spectrum Energy\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Spectrum\
      \ Energy Block',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32]\n        )\n        \n\n        \n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n\n        i_data_norm = np.real(input_items[0])\n        q_data_norm\
      \ = np.imag(input_items[0])\n        x = np.sqrt(np.power(i_data_norm,2) + np.power(q_data_norm,2))\n\
      \        output_items[0][:] = x\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Spectrum Energy Block', 'blk', [], [('0', 'complex', 1)], [('0',
      'float', 1)], 'Spectrum Energy - Record Spectrum Energy', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [732, 330]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '10'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '3'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [915, 222]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [822, 137]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Clean Signal
    label10: Signal 10
    label2: Noisy Signal
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '2'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '3'
    size: '10'
    srate: samp_rate
    stemplot: 'False'
    style1: '0'
    style10: '1'
    style2: '0'
    style3: '2'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '3'
    width1: '3'
    width10: '1'
    width2: '4'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Spectrum Energy
    ymax: '6'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1141, 321]
    rotation: 0
    state: true

connections:
- [analog_const_source_x_0, '0', qtgui_time_sink_x_0, '2']
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '1']
- [analog_random_source_x_0, '0', digital_constellation_encoder_bc_1, '0']
- [blocks_add_xx_0, '0', epy_block_0, '0']
- [blocks_add_xx_0, '0', epy_block_1, '0']
- [blocks_add_xx_0, '0', qtgui_const_sink_x_0, '0']
- [digital_constellation_encoder_bc_1, '0', blocks_add_xx_0, '0']
- [digital_constellation_encoder_bc_1, '0', epy_block_1_0, '0']
- [digital_constellation_encoder_bc_1, '0', qtgui_const_sink_x_0_0, '0']
- [epy_block_1, '0', qtgui_time_sink_x_0, '1']
- [epy_block_1_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
