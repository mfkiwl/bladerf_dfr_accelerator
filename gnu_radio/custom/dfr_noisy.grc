options:
  parameters:
    author: Osaze Shears
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: dfr
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: DFR Spectrum Sensing
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: noise_level
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 0,0
    label: Noise Level
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '2'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 21]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [183, 12]
    rotation: 0
    state: enabled
- name: samples
  id: variable
  parameters:
    comment: ''
    value: '6102'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 110]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: noise_level
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [164, 569]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [538, 515]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/oshears/Documents/bladeRF/bladerf_dfr_accelerator/gnu_radio/custom/junk.bin
    type: float
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [395, 1067]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/oshears/Documents/bladeRF/bladerf_dfr_accelerator/gnu_radio/custom/spectrum_data/i_data.bin
    length: samples
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [82, 222]
    rotation: 0
    state: true
- name: blocks_file_source_0_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/oshears/Documents/bladeRF/bladerf_dfr_accelerator/gnu_radio/custom/spectrum_data/q_data.bin
    length: samples
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [78, 377]
    rotation: 0
    state: true
- name: blocks_file_source_0_0_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/oshears/Documents/bladeRF/bladerf_dfr_accelerator/gnu_radio/custom/spectrum_data/out_data.bin
    length: samples
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [734, 534]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [301, 310]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 1 / (2 ** 11)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [323, 475]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    Feedback_Scale: '0.4'
    Input_Gain: '0.5'
    Mask_Max: '0.5'
    Mask_Min: '-0.5'
    Mask_Type: '''Uniform'''
    Random_Seed: '0'
    Virtual_Nodes: '50'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"DFR Block - Perform\
      \ DFR Inference\"\"\"\n\n    def __init__(self, Virtual_Nodes=50,Input_Gain=0.5,Feedback_Scale=0.4,Random_Seed=0,Mask_Min=-0.5,Mask_Max=0.5,Mask_Type=\"\
      Uniform\"):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='DFR Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.float32]\n    \
      \    )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        print(\"\
      Configuring DFR\")\n        self.Virtual_Nodes = Virtual_Nodes\n        self.seed\
      \ = Random_Seed\n        self.rng = np.random.default_rng(Random_Seed)\n   \
      \     self.N = Virtual_Nodes\n        self.gamma = Input_Gain\n        self.eta\
      \ = Feedback_Scale\n        self.LAST_NODE = self.N - 1\n        self.reg =\
      \ 1e-8\n        self.reservoir = np.zeros(self.N)\n        self.mask = self.rng.uniform(Mask_Min,Mask_Max,self.N)\n\
      \n        # self.W = np.array([-589.4317283630371,\n        #             -38.58226776123047,\n\
      \        #             946.5737419128418,\n        #             -979.8047285079956,\n\
      \        #             -283.7571544647217,\n        #             -559.7401161193848,\n\
      \        #             2737.4940071105957,\n        #             -314.8955874443054,\n\
      \        #             968.3470306396484,\n        #             7.468153893947601,\n\
      \        #             -1662.0237102508545,\n        #             229.55740356445312,\n\
      \        #             -264.89648628234863,\n        #             -0.3798371705415775,\n\
      \        #             -1349.5411758422852,\n        #             -1.4192554373876192,\n\
      \        #             323.34349060058594,\n        #             -286.4024085998535,\n\
      \        #             1281.8496704101562,\n        #             1125.2301445007324,\n\
      \        #             -818.563850402832,\n        #             577.280143737793,\n\
      \        #             185.4799575805664,\n        #             -33.83775329589844,\n\
      \        #             1772.1830215454102,\n        #             -1941.3939666748047,\n\
      \        #             140.7281723022461,\n        #             -2284.337860107422,\n\
      \        #             -144.74640655517578,\n        #             -231.86016082763672,\n\
      \        #             -11.057226657867432,\n        #             -2388.1128540039062,\n\
      \        #             26.346128640696406,\n        #             275.4407157897949,\n\
      \        #             438.04361724853516,\n        #             -944.2057266235352,\n\
      \        #             94.12022018432617,\n        #             170.9260711669922,\n\
      \        #             10.226631164550781,\n        #             64.93780899047852,\n\
      \        #             199.9371795654297,\n        #             -28.379258958622813,\n\
      \        #             -922.4196128845215,\n        #             2259.5208444595337,\n\
      \        #             -75.7298812866211,\n        #             272.80241775512695,\n\
      \        #             61.395785331726074,\n        #             481.0991744995117,\n\
      \        #             1018.62744140625,\n        #             2909.0243225097656])\n\
      \n        self.W = np.array([120.42606216296554,\n        -1807.49984228611,\n\
      \        -190.55212783813477,\n        -0.615568204819283,\n        -149.43982706591487,\n\
      \        514.6231700181961,\n        -10.249961536377668,\n        290.1148624420166,\n\
      \        -0.5264376669074409,\n        -725.5037930011749,\n        -831.6801414489746,\n\
      \        -339.5465271882713,\n        144.37274353858083,\n        1.0204199978907127,\n\
      \        -5.118039094028063,\n        4.713473149866331,\n        0.02879478414888581,\n\
      \        1528.663986235857,\n        13.79443645477295,\n        -6.624879090115428,\n\
      \        15.946529388427734,\n        1.5773625312140211,\n        -1667.9709073752165,\n\
      \        805.8867005854845,\n        -665.5140290260315,\n        609.862033367157,\n\
      \        -308.93261909484863,\n        -3.5253487057052553,\n        -3.9527146809268743,\n\
      \        -1370.994578436017,\n        -802.4010653495789,\n        0.9759305065890658,\n\
      \        -341.6779537200928,\n        1999.2160191759467,\n        190.90797265712172,\n\
      \        -52.18394413590431,\n        -1709.122000157833,\n        -518.0853526778519,\n\
      \        -875.7170631848276,\n        289.6419845058117,\n        -881.5920621305704,\n\
      \        384.23498380184174,\n        39.59513200819492,\n        -790.314578294754,\n\
      \        -1240.1787865236402,\n        -183.90678156376816,\n        2695.083712786436,\n\
      \        -251.39458788186312,\n        -12.07303048192989,\n        -714.8613681793213])\n\
      \n        \n\n    def work(self, input_items, output_items):\n        \"\"\"\
      example: multiply with constant\"\"\"\n        # output_items[0][:] = input_items[0]\
      \ * self.multiply_const\n        # print(input_items[0])\n\n        # ADC_MAX_SIGNED\
      \ = 2**11\n\n\n        NUM_SAMPLES = len(input_items[0])\n\n\n        i_data\
      \ = np.real(input_items[0])\n        q_data = np.imag(input_items[0])\n\n  \
      \      x = np.sqrt(np.power(i_data,2) + np.power(q_data,2))\n\n        # mask\
      \ generation\n        masked_samples = np.empty((NUM_SAMPLES,self.N))\n    \
      \    for i in range(NUM_SAMPLES):\n            masked_samples[i] = self.mask\
      \ * x[i]\n\n        \n\n        reservoir_history = np.zeros((NUM_SAMPLES,self.N))\n\
      \        for i in range(NUM_SAMPLES):\n            for j in range(self.N):\n\
      \n                g_i = self.mg(self.gamma * masked_samples[i][j] + self.eta\
      \ * self.reservoir[self.LAST_NODE])\n                self.reservoir[1:self.N]\
      \ = self.reservoir[0:self.LAST_NODE]\n                self.reservoir[0] = g_i\n\
      \n            reservoir_history[i] = self.reservoir\n\n\n        # y = reservoir_history.dot(self.W)\n\
      \        y = reservoir_history.dot(self.W)\n        y_bin = y.copy()\n     \
      \   y_bin[y_bin >= 0.5] = 1\n        y_bin[y_bin < 0.5] = 0\n\n        output_items[0][:]\
      \ = y_bin\n\n        return len(output_items[0])\n\n    def mg(self,x):\n  \
      \      a = 2\n        b = 0.8\n        c = 0.2\n        d = 2.1\n        p =\
      \ 10\n\n        return (a * x) / (b + c * np.power( (d * x), p) )\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('DFR Block', 'blk', [('Virtual_Nodes', '50'), ('Input_Gain', '0.5'),
      ('Feedback_Scale', '0.4'), ('Random_Seed', '0'), ('Mask_Min', '-0.5'), ('Mask_Max',
      '0.5'), ('Mask_Type', "'Uniform'")], [('0', 'complex', 1)], [('0', 'float',
      1)], 'DFR Block - Perform DFR Inference', ['Virtual_Nodes'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [406, 737]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Binary Accuracy Block\
      \ - Keep a running total of the accuracy\"\"\"\n\n    def __init__(self, num_samples=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Binary Accuracy Block',   # will show up in GRC\n\
      \            in_sig=[np.float32,np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.num_samples\
      \ = num_samples\n        self.processedSamples = 0\n        self.accuracy =\
      \ 0\n        self.sum = 0\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # output_items[0][:]\
      \ = input_items[0] * self.example_param\n\n        # previousSum = self.accuracy\
      \ * self.processedSamples\n        # currentSum = (input_items[0] == input_items[1]).sum()\n\
      \        # currentNumSamples = len(input_items[0])\n        # train_accuracy\
      \ =  (currentSum + previousSum) / (currentNumSamples + self.processedSamples)\n\
      \        # # auc = roc_auc_score(y_train, y_hat)\n        # output_items[0][:]\
      \ = train_accuracy\n\n        # self.processedSamples += len(output_items[0])\n\
      \n        accuracyValues = []\n        for i in range(len(input_items[0])):\n\
      \            self.processedSamples += 1\n            if input_items[0][i] ==\
      \ input_items[1][i]:\n                self.sum += 1\n            self.accuracy\
      \ = self.sum / self.processedSamples\n            accuracyValues.append(self.accuracy)\n\
      \        # print(accuracyValues)\n        output_items[0][:] = np.array(accuracyValues)\n\
      \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples: '0'
  states:
    _io_cache: ('Binary Accuracy Block', 'blk', [('num_samples', '1.0')], [('0', 'float',
      1), ('1', 'float', 1)], [('0', 'float', 1)], 'Binary Accuracy Block - Keep a
      running total of the accuracy', ['num_samples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [742, 865]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Spectrum Energy - Record\
      \ Spectrum Energy\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Spectrum\
      \ Energy Block',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32]\n        )\n        \n\n        \n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n\n        i_data_norm = np.real(input_items[0])\n        q_data_norm\
      \ = np.imag(input_items[0])\n        x = np.sqrt(np.power(i_data_norm,2) + np.power(q_data_norm,2))\n\
      \        output_items[0][:] = x\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Spectrum Energy Block', 'blk', [], [('0', 'complex', 1)], [('0',
      'float', 1)], 'Spectrum Energy - Record Spectrum Energy', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [702, 467]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Spectrum Energy - Record\
      \ Spectrum Energy\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Spectrum\
      \ Energy Block',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32]\n        )\n        \n\n        \n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n\n        i_data_norm = np.real(input_items[0])\n        q_data_norm\
      \ = np.imag(input_items[0])\n        x = np.sqrt(np.power(i_data_norm,2) + np.power(q_data_norm,2))\n\
      \        output_items[0][:] = x\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Spectrum Energy Block', 'blk', [], [('0', 'complex', 1)], [('0',
      'float', 1)], 'Spectrum Energy - Record Spectrum Energy', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [554, 413]
    rotation: 0
    state: disabled
- name: epy_block_1_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Binary Accuracy Block\
      \ - Keep a running total of the accuracy\"\"\"\n\n    def __init__(self, num_samples=0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Binary Accuracy Block',   # will show up in GRC\n\
      \            in_sig=[np.float32,np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.num_samples\
      \ = num_samples\n        self.processedSamples = 0\n        self.accuracy =\
      \ 0\n        self.values = []\n        self.sum = 0\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    # output_items[0][:] = input_items[0] * self.example_param\n\n        #\
      \ previousSum = self.accuracy * self.processedSamples\n        # currentSum\
      \ = (input_items[0] == input_items[1]).sum()\n        # currentNumSamples =\
      \ len(input_items[0])\n        # train_accuracy =  (currentSum + previousSum)\
      \ / (currentNumSamples + self.processedSamples)\n        # # auc = roc_auc_score(y_train,\
      \ y_hat)\n        # output_items[0][:] = train_accuracy\n\n        # self.processedSamples\
      \ += len(output_items[0])\n\n        accuracyValues = []\n        for i in range(len(input_items[0])):\n\
      \            self.processedSamples += 1\n            \n            if self.num_samples\
      \ <= 0:\n                \n                if input_items[0][i] == input_items[1][i]:\n\
      \                    self.sum += 1\n\n                self.accuracy = self.sum\
      \ / self.processedSamples\n                accuracyValues.append(self.accuracy)\n\
      \n            else:\n                # remove oldest value\n               \
      \ if self.processedSamples > self.num_samples:\n                    self.values\
      \ = self.values[1:self.num_samples]\n                # insert newest prediction\n\
      \                self.values.append(1 if input_items[0][i] == input_items[1][i]\
      \ else 0)\n                # calculate accuracy \n                accuracyValues.append(np.array(self.values).sum()\
      \ / len(self.values))\n                    \n\n        output_items[0][:] =\
      \ np.array(accuracyValues)\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples: '0'
  states:
    _io_cache: ('Binary Accuracy Block', 'blk', [('num_samples', '0')], [('0', 'float',
      1), ('1', 'float', 1)], [('0', 'float', 1)], 'Binary Accuracy Block - Keep a
      running total of the accuracy', ['num_samples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [657, 969]
    rotation: 0
    state: enabled
- name: epy_block_1_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Binary Accuracy Block\
      \ - Keep a running total of the accuracy\"\"\"\n\n    def __init__(self, num_samples=0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Binary Accuracy Block',   # will show up in GRC\n\
      \            in_sig=[np.float32,np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.num_samples\
      \ = num_samples\n        self.processedSamples = 0\n        self.accuracy =\
      \ 0\n        self.values = []\n        self.sum = 0\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    # output_items[0][:] = input_items[0] * self.example_param\n\n        #\
      \ previousSum = self.accuracy * self.processedSamples\n        # currentSum\
      \ = (input_items[0] == input_items[1]).sum()\n        # currentNumSamples =\
      \ len(input_items[0])\n        # train_accuracy =  (currentSum + previousSum)\
      \ / (currentNumSamples + self.processedSamples)\n        # # auc = roc_auc_score(y_train,\
      \ y_hat)\n        # output_items[0][:] = train_accuracy\n\n        # self.processedSamples\
      \ += len(output_items[0])\n\n        accuracyValues = []\n        for i in range(len(input_items[0])):\n\
      \            self.processedSamples += 1\n            \n            if self.num_samples\
      \ <= 0:\n                \n                if input_items[0][i] == input_items[1][i]:\n\
      \                    self.sum += 1\n\n                self.accuracy = self.sum\
      \ / self.processedSamples\n                accuracyValues.append(self.accuracy)\n\
      \n            else:\n                # remove oldest value\n               \
      \ if self.processedSamples > self.num_samples:\n                    self.values\
      \ = self.values[1:self.num_samples]\n                # insert newest prediction\n\
      \                self.values.append(1 if input_items[0][i] == input_items[1][i]\
      \ else 0)\n                # calculate accuracy \n                accuracyValues.append(np.array(self.values).sum()\
      \ / len(self.values))\n                    \n\n        output_items[0][:] =\
      \ np.array(accuracyValues)\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples: '10'
  states:
    _io_cache: ('Binary Accuracy Block', 'blk', [('num_samples', '0')], [('0', 'float',
      1), ('1', 'float', 1)], [('0', 'float', 1)], 'Binary Accuracy Block - Keep a
      running total of the accuracy', ['num_samples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [619, 1173]
    rotation: 0
    state: enabled
- name: epy_block_1_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Binary Accuracy Block\
      \ - Keep a running total of the accuracy\"\"\"\n\n    def __init__(self, num_samples=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Binary Accuracy Block',   # will show up in GRC\n\
      \            in_sig=[np.float32,np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.num_samples\
      \ = num_samples\n        self.processedSamples = 0\n        self.accuracy =\
      \ 0\n        self.sum = 0\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # output_items[0][:]\
      \ = input_items[0] * self.example_param\n\n        # previousSum = self.accuracy\
      \ * self.processedSamples\n        # currentSum = (input_items[0] == input_items[1]).sum()\n\
      \        # currentNumSamples = len(input_items[0])\n        # train_accuracy\
      \ =  (currentSum + previousSum) / (currentNumSamples + self.processedSamples)\n\
      \        # # auc = roc_auc_score(y_train, y_hat)\n        # output_items[0][:]\
      \ = train_accuracy\n\n        # self.processedSamples += len(output_items[0])\n\
      \n        accuracyValues = []\n        for i in range(len(input_items[0])):\n\
      \            self.processedSamples += 1\n            if input_items[0][i] ==\
      \ input_items[1][i]:\n                self.sum += 1\n            self.accuracy\
      \ = self.sum / self.processedSamples\n            accuracyValues.append(self.accuracy)\n\
      \        # print(accuracyValues)\n        output_items[0][:] = np.array(accuracyValues)\n\
      \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples: '10'
  states:
    _io_cache: ('Binary Accuracy Block', 'blk', [('num_samples', '1.0')], [('0', 'float',
      1), ('1', 'float', 1)], [('0', 'float', 1)], 'Binary Accuracy Block - Keep a
      running total of the accuracy', ['num_samples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [636, 1061]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Threshold Prediction\"\
      \"\"\n\n    def __init__(self, threshold=1.0):  # only default arguments here\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Threshold\
      \ Prediction Block',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.threshold = threshold\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n\n        i_data = np.real(input_items[0])\n        q_data = np.imag(input_items[0])\n\
      \n        x = np.sqrt(np.power(i_data,2) + np.power(q_data,2))\n\n        y\
      \ = x.copy()\n        y[y >= self.threshold] = 1\n        y[y < self.threshold]\
      \ = 0\n\n\n        output_items[0][:] = y\n        # output_items[0][:] = 1\n\
      \        # print(output_items[0])\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: '0.75'
  states:
    _io_cache: ('Threshold Prediction Block', 'blk', [('threshold', '1.0')], [('0',
      'complex', 1)], [('0', 'float', 1)], 'Threshold Prediction', ['threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [316, 925]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 1,0
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '100'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '1'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '4'
    xmin: '-4'
    ymax: '4'
    ymin: '-4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [713, 338]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '10'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 216]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 2,0
    label1: Input
    label10: Signal 10
    label2: Spectrum Occupancy
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '2'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Spectrum Energy
    nconnections: '1'
    size: '10'
    srate: samp_rate
    stemplot: 'False'
    style1: '0'
    style10: '1'
    style2: '0'
    style3: '2'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '1'
    width1: '3'
    width10: '1'
    width2: '3'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Spectrum Energy
    ymax: '5'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [974, 423]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 3,0
    label1: Actual
    label10: Signal 10
    label2: Predicted
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '2'
    marker3: '3'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Spectrum Occupancy Prediction
    nconnections: '3'
    size: '10'
    srate: samp_rate
    stemplot: 'False'
    style1: '0'
    style10: '1'
    style2: '0'
    style3: '0'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '1'
    width1: '3'
    width10: '1'
    width2: '3'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Spectrum Occupancy
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [975, 683]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 5,0
    label1: Accuracy
    label10: Signal 10
    label2: Spectrum Occupancy
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '2'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Spectr
    nconnections: '1'
    size: '100'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '0'
    style3: '2'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '1'
    width1: '3'
    width10: '1'
    width2: '3'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Accuracy
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [956, 812]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 4,0
    label1: DFR
    label10: Signal 10
    label2: Threshold
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Total Prediction Accuracy
    nconnections: '2'
    size: '100'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '2'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '1'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Accuracy
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [948, 939]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_1_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 5,0
    label1: DFR
    label10: Signal 10
    label2: Threshold
    label3: Threshold
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: 100 Sample Prediction Accuracy
    nconnections: '2'
    size: '100'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '2'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '1'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '3'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Accuracy
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 1078]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '1']
- [blocks_add_xx_0, '0', epy_block_0, '0']
- [blocks_add_xx_0, '0', epy_block_1_0, '0']
- [blocks_add_xx_0, '0', epy_block_2, '0']
- [blocks_add_xx_0, '0', qtgui_const_sink_x_0, '0']
- [blocks_file_source_0, '0', blocks_float_to_complex_0, '0']
- [blocks_file_source_0_0, '0', blocks_float_to_complex_0, '1']
- [blocks_file_source_0_0_0, '0', epy_block_1, '0']
- [blocks_file_source_0_0_0, '0', epy_block_1_1, '0']
- [blocks_file_source_0_0_0, '0', epy_block_1_1_0, '0']
- [blocks_file_source_0_0_0, '0', epy_block_1_2, '0']
- [blocks_file_source_0_0_0, '0', qtgui_time_sink_x_0_0_0, '0']
- [blocks_float_to_complex_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_float_to_complex_0, '0', epy_block_1_0_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_add_xx_0, '0']
- [epy_block_0, '0', epy_block_1, '1']
- [epy_block_0, '0', epy_block_1_2, '1']
- [epy_block_0, '0', qtgui_time_sink_x_0_0_0, '1']
- [epy_block_1, '0', qtgui_time_sink_x_0_0_1, '0']
- [epy_block_1, '0', qtgui_time_sink_x_0_0_1_0, '0']
- [epy_block_1_0, '0', qtgui_time_sink_x_0_0, '0']
- [epy_block_1_0_0, '0', qtgui_time_sink_x_0_0, '0']
- [epy_block_1_1, '0', qtgui_time_sink_x_0_0_1_0, '1']
- [epy_block_1_1_0, '0', qtgui_time_sink_x_0_0_1_0_0, '1']
- [epy_block_1_2, '0', qtgui_time_sink_x_0_0_1_0_0, '0']
- [epy_block_2, '0', blocks_file_sink_0, '0']
- [epy_block_2, '0', epy_block_1_1, '1']
- [epy_block_2, '0', epy_block_1_1_0, '1']
- [epy_block_2, '0', qtgui_time_sink_x_0_0_0, '2']

metadata:
  file_format: 1
